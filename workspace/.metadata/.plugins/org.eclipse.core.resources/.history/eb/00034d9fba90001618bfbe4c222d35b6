package chartBuilder;

import csci348.drawings.SimpleDrawing;

class Parallelogram extends Shape{
	private int x1;
	private int y1;
	private int x2;
	private int y2;
	private int x3;
	private int y3;
	private Line l1;
	private Line l2;
	private Line l3;
	private Line l4;
	private char type;
	private int shift;

	protected Parallelogram(int x, int y, int width, int height, int shift, char type,  SimpleDrawing draw) {
		super(x, y, draw);
		if(type=='H'||type=='h'){
			x1=x+width;
			y1=y;
			x2=x1+shift;
			y2=y+height;
			x3=x2+width;
			y3=y2;
		}
		if(type=='V'||type=='v'){
			y1=y+height;
			x1=x;
			y2=y1+shift;
			x2=x+width;
			y3=y2+height;
			x3=x2;
		}
		this.type=type;
		this.shift=shift;
		draw();
	}
	
	@Override
	protected void draw(){
		l1=new Line(x,y,x1,y1,draw);
		l2=new Line(x1,y1,x2,y2,draw);
		l3=new Line(x2,y2,x3,y3,draw);
		l4=new Line(x3,y3,x,y,draw);
	}
	
	@Override
	protected void erase(){
		l1.erase();
		l2.erase();
		l3.erase();
		l4.erase();
	}
	
	@Override
	protected boolean checkPoint(int pX, int pY){
		if((type=='H'||type=='h')&&shift<0){
			if(((x3<pX && pX<x1)||(pX==x3)||pX==x1)&&((y<pY&&pY<y2)||(y==pY)||(y2==pY))){
				return true;
			}
			return false;
		}
		else if((type=='H'||type=='h')&&shift>0){
			if(((x<pX && pX<x2)||(pX==x)||pX==x2)&&((y<pY&&pY<y2)||(y==pY)||(y2==pY))){
				return true;
			}
			return false;
		}
		else if((type=='V'||type=='v')&&shift<0){
			if(((x<pX && pX<x2)||(pX==x)||pX==x2)&&((y<pY&&pY<y2)||(y==pY)||(y2==pY))){
				return true;
			}
			return false;
		}
		else if((type=='V'||type=='v')&&shift<0){
			if(((x<pX && pX<x2)||(pX==x)||pX==x2)&&((y3<pY&&pY<y1)||(y3==pY)||(y1==pY))){
				return true;
			}
			return false;
		}
		return false;
	}
	
}
